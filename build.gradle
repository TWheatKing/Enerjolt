plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.72'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

version = mod_version
group = mod_group_id

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven { url "https://maven.shedaniel.me" }
    maven { url "https://modmaven.dev" }
    maven { url "https://maven.terraformersmc.com/" }

    maven {
        name "OctoStudios"
        url "https://maven.octo-studios.com/releases"
    }

    maven {
        url "https://maven.squiddev.cc/"
        content {
            includeGroup("cc.tweaked")
        }
    }

    flatDir {
        dir 'libs'
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // The version of NeoForge to use
    version = neo_version

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = mapping_version
    }

    runs {
        configureEach {
            // Ensure proper file generation
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            systemProperty 'forge.logging.console.level', 'debug'
        }
        client {
            client()
            systemProperty 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            server()
            systemProperty 'forge.enabledGameTestNamespaces', mod_id
            programArgument '--nogui'
        }

        data {
            data()
            programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        "enerjolt" {
            sourceSet sourceSets.main
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    // NeoForge dependency
    implementation "net.neoforged:neoforge:${neo_version}"

    // REI integration
    compileOnly 'me.shedaniel.cloth:basic-math:0.6.1'
    compileOnly "dev.architectury:architectury-neoforge:13.0.6"
    compileOnly 'me.shedaniel:RoughlyEnoughItems-neoforge:16.0.783'
    compileOnly "me.shedaniel:REIPluginCompatibilities-forge-annotations:12.+"

    // JEI integration
    compileOnly "mezz.jei:jei-1.21.1-common-api:19.21.0.246"
    compileOnly "mezz.jei:jei-1.21.1-neoforge-api:19.21.0.246"

    // EMI integration
    compileOnly "dev.emi:emi-neoforge:1.1.15+1.21.1:api"

    // Curios integration
    compileOnly "top.theillusivec4.curios:curios-neoforge:9.3.1+1.21.1"

    // CCTweaked integration
    compileOnly "cc.tweaked:cc-tweaked-1.21.1-core-api:1.113.1"
    compileOnly "cc.tweaked:cc-tweaked-1.21.1-forge-api:1.113.1"

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// This block of code expands all declared replace properties in the specified resource targets.
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "enerjolt",
                "Specification-Vendor"    : "TWheatKing",
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "TWheatKing",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.publishUnified {
    dependsOn build
}

unifiedPublishing {
    project {
        displayName = "Enerjolt - " + project.minecraft_version + " - v" + project.mod_version.split("-")[1] + " [NeoForge]"
        version = project.mod_version
        changelog = new File("CHANGELOG.md").getText("UTF-8")
        releaseType = "release"
        gameVersions = [project.minecraft_version]
        gameLoaders = ["neoforge"]

        mainPublication.set(project.rootDir.toPath().resolve("build/libs").resolve(project.mod_id + "-" + project.version + ".jar").toFile())

        relations {
            //No dependencies
        }

        if(project.hasProperty('MODRINTH_TOKEN')) {
            modrinth {
                token = getProperty('MODRINTH_TOKEN') as String
                id = "hnIMM0Q5"
            }
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}